{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "learn-synapse"
		},
		"csv_sql_db_LS_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'csv_sql_db_LS'"
		},
		"learn-synapse-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'learn-synapse-WorkspaceDefaultSqlServer'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=tcp:learn-synapse.sql.azuresynapse.net,1433;Initial Catalog=@{linkedService().DBName}"
		},
		"csv_sql_db_LS_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "sqlserverforsqldb.database.windows.net"
		},
		"csv_sql_db_LS_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "sql_db"
		},
		"csv_sql_db_LS_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "dkm"
		},
		"learn-synapse-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://adls5synapse.dfs.core.windows.net"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/CSV_FILE_Ingestion_from_SQL_DB_to_ADLS')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Copy SQL DB Data to ADLS",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings",
									"copyBehavior": "FlattenHierarchy"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SQL_DB_DS",
								"type": "DatasetReference",
								"parameters": {
									"SchemaName": "saleslt",
									"TableName": "CustomerAddress"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ADLS_DS_csv",
								"type": "DatasetReference",
								"parameters": {
									"FolderName": "Project4/landing/CustomerAddress"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/SQL_DB_DS')]",
				"[concat(variables('workspaceId'), '/datasets/ADLS_DS_csv')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Customer Silver Layer Spark Notebook')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Customer Silver Layer Spark Notebook",
						"type": "SynapseNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "Customer Silver Layer Notebook",
								"type": "NotebookReference"
							},
							"snapshot": true,
							"sparkPool": {
								"referenceName": "SmallCluster",
								"type": "BigDataPoolReference"
							},
							"executorSize": "Small",
							"conf": {
								"spark.dynamicAllocation.enabled": null,
								"spark.dynamicAllocation.minExecutors": null,
								"spark.dynamicAllocation.maxExecutors": null
							},
							"driverSize": "Small",
							"numExecutors": null
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/notebooks/Customer Silver Layer Notebook')]",
				"[concat(variables('workspaceId'), '/bigDataPools/SmallCluster')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Customer Spark Notebook')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Notebook1",
						"type": "SynapseNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "Notebook-for-Customer",
								"type": "NotebookReference"
							},
							"snapshot": true,
							"sparkPool": {
								"referenceName": "SmallCluster",
								"type": "BigDataPoolReference"
							},
							"executorSize": "Small",
							"conf": {
								"spark.dynamicAllocation.enabled": null,
								"spark.dynamicAllocation.minExecutors": null,
								"spark.dynamicAllocation.maxExecutors": null
							},
							"driverSize": "Small",
							"numExecutors": null
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/notebooks/Notebook-for-Customer')]",
				"[concat(variables('workspaceId'), '/bigDataPools/SmallCluster')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CustomerAddress Silver Layer Spark Notebook')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "CustomerAddress Silver Layer Spark Notebook",
						"type": "SynapseNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "CustomerAddress Silver Layer Notebook",
								"type": "NotebookReference"
							},
							"snapshot": true,
							"sparkPool": {
								"referenceName": "SmallCluster",
								"type": "BigDataPoolReference"
							},
							"executorSize": "Small",
							"conf": {
								"spark.dynamicAllocation.enabled": null,
								"spark.dynamicAllocation.minExecutors": null,
								"spark.dynamicAllocation.maxExecutors": null
							},
							"driverSize": "Small",
							"numExecutors": null
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/notebooks/CustomerAddress Silver Layer Notebook')]",
				"[concat(variables('workspaceId'), '/bigDataPools/SmallCluster')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CustomerAddress Spark Notebook')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Notebook CustomerAddress",
						"type": "SynapseNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "Notebook-for-CustomerAddress",
								"type": "NotebookReference"
							},
							"snapshot": true,
							"sparkPool": {
								"referenceName": "SmallCluster",
								"type": "BigDataPoolReference"
							},
							"executorSize": "Small",
							"conf": {
								"spark.dynamicAllocation.enabled": null,
								"spark.dynamicAllocation.minExecutors": null,
								"spark.dynamicAllocation.maxExecutors": null
							},
							"driverSize": "Small",
							"numExecutors": null
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/notebooks/Notebook-for-CustomerAddress')]",
				"[concat(variables('workspaceId'), '/bigDataPools/SmallCluster')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CustomerInfo Gold Layer Spark Notebook')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Notebook1",
						"type": "SynapseNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "CustomerInfo Gold Layer Notebook",
								"type": "NotebookReference"
							},
							"snapshot": true,
							"sparkPool": {
								"referenceName": "SmallCluster",
								"type": "BigDataPoolReference"
							},
							"executorSize": "Small",
							"conf": {
								"spark.dynamicAllocation.enabled": null,
								"spark.dynamicAllocation.minExecutors": null,
								"spark.dynamicAllocation.maxExecutors": null
							},
							"driverSize": "Small",
							"numExecutors": null
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/notebooks/CustomerInfo Gold Layer Notebook')]",
				"[concat(variables('workspaceId'), '/bigDataPools/SmallCluster')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ADLS_DS_csv')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "learn-synapse-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FolderName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().FolderName",
							"type": "Expression"
						},
						"fileSystem": "landing"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Region",
						"type": "String"
					},
					{
						"name": "Country",
						"type": "String"
					},
					{
						"name": "ItemType",
						"type": "String"
					},
					{
						"name": "SalesChannel",
						"type": "String"
					},
					{
						"name": "OrderPriority",
						"type": "String"
					},
					{
						"name": "OrderID",
						"type": "String"
					},
					{
						"name": "UnitsSold",
						"type": "String"
					},
					{
						"name": "UnitPrice",
						"type": "String"
					},
					{
						"name": "UnitCost",
						"type": "String"
					},
					{
						"name": "TotalRevenue",
						"type": "String"
					},
					{
						"name": "TotalCost",
						"type": "String"
					},
					{
						"name": "TotalProfit",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/learn-synapse-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL_DB_DS')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "csv_sql_db_LS",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"SchemaName": {
						"type": "string",
						"defaultValue": "saleslt"
					},
					"TableName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "SalesOrderID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SalesOrderDetailID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "OrderQty",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "ProductID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "UnitPrice",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "UnitPriceDiscount",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "LineTotal",
						"type": "decimal",
						"precision": 38,
						"scale": 6
					},
					{
						"name": "rowguid",
						"type": "uniqueidentifier"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": {
						"value": "@dataset().SchemaName",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().TableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/csv_sql_db_LS')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/csv_sql_db_LS')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('csv_sql_db_LS_properties_typeProperties_server')]",
					"database": "[parameters('csv_sql_db_LS_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('csv_sql_db_LS_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('csv_sql_db_LS_password')]"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/learn-synapse-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('learn-synapse-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/learn-synapse-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('learn-synapse-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/WorkspaceSystemIdentity')]",
			"type": "Microsoft.Synapse/workspaces/credentials",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script Bronze Customer')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "IF NOT EXISTS (SELECT * FROM sys.external_file_formats WHERE name = 'SynapseParquetFormat') \n\tCREATE EXTERNAL FILE FORMAT [SynapseParquetFormat] \n\tWITH ( FORMAT_TYPE = PARQUET)\nGO\n\nIF NOT EXISTS (SELECT * FROM sys.external_data_sources WHERE name = 'landing_adls5synapse_dfs_core_windows_net') \n\tCREATE EXTERNAL DATA SOURCE [landing_adls5synapse_dfs_core_windows_net] \n\tWITH (\n\t\tLOCATION = 'abfss://landing@adls5synapse.dfs.core.windows.net' \n\t)\nGO\n\nCREATE EXTERNAL TABLE bronze.customer (\n\t[CustomerID] int,\n\t[NameStyle] bit,\n\t[Title] nvarchar(4000),\n\t[FirstName] nvarchar(4000),\n\t[MiddleName] nvarchar(4000),\n\t[LastName] nvarchar(4000),\n\t[Suffix] nvarchar(4000),\n\t[CompanyName] nvarchar(4000),\n\t[SalesPerson] nvarchar(4000),\n\t[EmailAddress] nvarchar(4000),\n\t[Phone] nvarchar(4000),\n\t[PasswordHash] nvarchar(4000),\n\t[PasswordSalt] nvarchar(4000),\n\t[rowguid] nvarchar(4000),\n\t[ModifiedDate] datetime2(7)\n\t)\n\tWITH (\n\tLOCATION = 'Project4/BronzeLayer/Customer/**',\n\tDATA_SOURCE = [landing_adls5synapse_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM bronze.customer\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "Serverless_DB",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script Bronze CustomerAddress')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "IF NOT EXISTS (SELECT * FROM sys.external_file_formats WHERE name = 'SynapseParquetFormat') \n\tCREATE EXTERNAL FILE FORMAT [SynapseParquetFormat] \n\tWITH ( FORMAT_TYPE = PARQUET)\nGO\n\nIF NOT EXISTS (SELECT * FROM sys.external_data_sources WHERE name = 'landing_adls5synapse_dfs_core_windows_net') \n\tCREATE EXTERNAL DATA SOURCE [landing_adls5synapse_dfs_core_windows_net] \n\tWITH (\n\t\tLOCATION = 'abfss://landing@adls5synapse.dfs.core.windows.net' \n\t)\nGO\n\nCREATE EXTERNAL TABLE bronze.CustomerAddress (\n\t[CustomerID] int,\n\t[AddressID] int,\n\t[AddressType] nvarchar(4000),\n\t[rowguid] nvarchar(4000),\n\t[ModifiedDate] datetime2(7)\n\t)\n\tWITH (\n\tLOCATION = 'Project4/BronzeLayer/CustomerAddress/**',\n\tDATA_SOURCE = [landing_adls5synapse_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM bronze.CustomerAddress\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "Serverless_DB",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script Gold CustomerInfo')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "IF NOT EXISTS (SELECT * FROM sys.external_file_formats WHERE name = 'SynapseParquetFormat') \n\tCREATE EXTERNAL FILE FORMAT [SynapseParquetFormat] \n\tWITH ( FORMAT_TYPE = PARQUET)\nGO\n\nIF NOT EXISTS (SELECT * FROM sys.external_data_sources WHERE name = 'landing_adls5synapse_dfs_core_windows_net') \n\tCREATE EXTERNAL DATA SOURCE [landing_adls5synapse_dfs_core_windows_net] \n\tWITH (\n\t\tLOCATION = 'abfss://landing@adls5synapse.dfs.core.windows.net' \n\t)\nGO\n\nCREATE EXTERNAL TABLE Gold.CustomerInfo (\n\t[CustomerID] int,\n\t[NameStyle] bit,\n\t[Title] nvarchar(4000),\n\t[FirstName] nvarchar(4000),\n\t[MiddleName] nvarchar(4000),\n\t[LastName] nvarchar(4000),\n\t[Suffix] nvarchar(4000),\n\t[CompanyName] nvarchar(4000),\n\t[SalesPerson] nvarchar(4000),\n\t[EmailAddress] nvarchar(4000),\n\t[Phone] nvarchar(4000),\n\t[PasswordHash] nvarchar(4000),\n\t[PasswordSalt] nvarchar(4000),\n\t[rowguid] nvarchar(4000),\n\t[ModifiedDate] datetime2(7),\n\t[CustID] int,\n\t[AddressID] int,\n\t[AddressType] nvarchar(4000)\n\t)\n\tWITH (\n\tLOCATION = 'Project4/GoldLayer/CustomerInfo/**',\n\tDATA_SOURCE = [landing_adls5synapse_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM Gold.CustomerInfo\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "Serverless_DB",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script Schema Creation')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "CREATE SCHEMA bronze GO\nCREATE SCHEMA silver GO\nCREATE SCHEMA Gold GO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "Serverless_DB",
						"poolName": "Built-in"
					},
					"resultLimit": -1
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script Silver Customer')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "IF NOT EXISTS (SELECT * FROM sys.external_file_formats WHERE name = 'SynapseParquetFormat') \n\tCREATE EXTERNAL FILE FORMAT [SynapseParquetFormat] \n\tWITH ( FORMAT_TYPE = PARQUET)\nGO\n\nIF NOT EXISTS (SELECT * FROM sys.external_data_sources WHERE name = 'landing_adls5synapse_dfs_core_windows_net') \n\tCREATE EXTERNAL DATA SOURCE [landing_adls5synapse_dfs_core_windows_net] \n\tWITH (\n\t\tLOCATION = 'abfss://landing@adls5synapse.dfs.core.windows.net' \n\t)\nGO\n\nCREATE EXTERNAL TABLE silver.Customer (\n\t[CustomerID] int,\n\t[NameStyle] bit,\n\t[Title] nvarchar(4000),\n\t[FirstName] nvarchar(4000),\n\t[MiddleName] nvarchar(4000),\n\t[LastName] nvarchar(4000),\n\t[Suffix] nvarchar(4000),\n\t[CompanyName] nvarchar(4000),\n\t[SalesPerson] nvarchar(4000),\n\t[EmailAddress] nvarchar(4000),\n\t[Phone] nvarchar(4000),\n\t[PasswordHash] nvarchar(4000),\n\t[PasswordSalt] nvarchar(4000),\n\t[rowguid] nvarchar(4000),\n\t[ModifiedDate] datetime2(7)\n\t)\n\tWITH (\n\tLOCATION = 'Project4/SilverLayer/Customer/**',\n\tDATA_SOURCE = [landing_adls5synapse_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM silver.Customer\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "Serverless_DB",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script Silver CustomerAddress')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "IF NOT EXISTS (SELECT * FROM sys.external_file_formats WHERE name = 'SynapseParquetFormat') \n\tCREATE EXTERNAL FILE FORMAT [SynapseParquetFormat] \n\tWITH ( FORMAT_TYPE = PARQUET)\nGO\n\nIF NOT EXISTS (SELECT * FROM sys.external_data_sources WHERE name = 'landing_adls5synapse_dfs_core_windows_net') \n\tCREATE EXTERNAL DATA SOURCE [landing_adls5synapse_dfs_core_windows_net] \n\tWITH (\n\t\tLOCATION = 'abfss://landing@adls5synapse.dfs.core.windows.net' \n\t)\nGO\n\nCREATE EXTERNAL TABLE silver.CustomerAddress (\n\t[CustomerID] int,\n\t[AddressID] int,\n\t[AddressType] nvarchar(4000),\n\t[rowguid] nvarchar(4000),\n\t[ModifiedDate] datetime2(7)\n\t)\n\tWITH (\n\tLOCATION = 'Project4/SilverLayer/CustomerAddress/**',\n\tDATA_SOURCE = [landing_adls5synapse_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM silver.CustomerAddress\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "Serverless_DB",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Customer Silver Layer Notebook')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "SmallCluster",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "a7d3322e-9890-4d2c-8f33-5c850a4b0c42"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/8c5b7985-7f6a-483c-9637-a6887dea60c9/resourceGroups/synapse_rg/providers/Microsoft.Synapse/workspaces/learn-synapse/bigDataPools/SmallCluster",
						"name": "SmallCluster",
						"type": "Spark",
						"endpoint": "https://learn-synapse.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SmallCluster",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.4",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"collapsed": false
						},
						"source": [
							"df = spark.read.load('abfss://landing@adls5synapse.dfs.core.windows.net/Project4/BronzeLayer/Customer/part-00000-f6c151a7-2604-4553-82a5-ce0c2b6348c0-c000.snappy.parquet', format='parquet')\r\n",
							"df1 = df.filter(\"Suffix != 'undefined'\")\r\n",
							"df1.write.save(path = 'abfss://landing@adls5synapse.dfs.core.windows.net/Project4/SilverLayer/Customer/')"
						],
						"outputs": [],
						"execution_count": 6
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CustomerAddress Silver Layer Notebook')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "SmallCluster",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "e8217d62-bb7e-4d0a-a5d8-e1e63e647773"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/8c5b7985-7f6a-483c-9637-a6887dea60c9/resourceGroups/synapse_rg/providers/Microsoft.Synapse/workspaces/learn-synapse/bigDataPools/SmallCluster",
						"name": "SmallCluster",
						"type": "Spark",
						"endpoint": "https://learn-synapse.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SmallCluster",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.4",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"collapsed": false
						},
						"source": [
							"df = spark.read.load('abfss://landing@adls5synapse.dfs.core.windows.net/Project4/BronzeLayer/CustomerAddress/part-00000-142dac2e-a4e9-4445-9d88-de5556b3b332-c000.snappy.parquet', format='parquet')\r\n",
							"df1 = df.where(\"AddressType == 'Main Office'\")\r\n",
							"df1.write.save(path = 'abfss://landing@adls5synapse.dfs.core.windows.net/Project4/SilverLayer/CustomerAddress/')"
						],
						"outputs": [],
						"execution_count": 14
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CustomerInfo Gold Layer Notebook')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "SmallCluster",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "015f5a5b-cd8f-4026-bfc6-69448e69bc84"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/8c5b7985-7f6a-483c-9637-a6887dea60c9/resourceGroups/synapse_rg/providers/Microsoft.Synapse/workspaces/learn-synapse/bigDataPools/SmallCluster",
						"name": "SmallCluster",
						"type": "Spark",
						"endpoint": "https://learn-synapse.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SmallCluster",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.4",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"collapsed": false
						},
						"source": [
							"cd = spark.read.load('abfss://landing@adls5synapse.dfs.core.windows.net/Project4/SilverLayer/Customer/part-00000-23238c8e-c939-4dcc-bd6e-c2e3263cd735-c000.snappy.parquet', format='parquet')\r\n",
							"cad = spark.read.load('abfss://landing@adls5synapse.dfs.core.windows.net/Project4/SilverLayer/CustomerAddress/part-00000-f4dff61f-8a6c-401a-9ad9-258a12b05f87-c000.snappy.parquet', format='parquet')\r\n",
							"from pyspark.sql.functions import expr\r\n",
							"cad = cad.select(expr(\"CustomerID as CustID\"),\"AddressID\",\"AddressType\")\r\n",
							"df = cd.join(cad.select(\"CustID\",\"AddressID\",\"AddressType\"), cd.CustomerID == cad.CustID, \"left\")\r\n",
							"df.write.save(path = 'abfss://landing@adls5synapse.dfs.core.windows.net/Project4/GoldLayer/CustomerInfo/')"
						],
						"outputs": [],
						"execution_count": 36
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Notebook-for-Customer')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "SmallCluster",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "fc542c68-2c0a-4932-8648-8ca688fcef4d"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/8c5b7985-7f6a-483c-9637-a6887dea60c9/resourceGroups/synapse_rg/providers/Microsoft.Synapse/workspaces/learn-synapse/bigDataPools/SmallCluster",
						"name": "SmallCluster",
						"type": "Spark",
						"endpoint": "https://learn-synapse.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SmallCluster",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.4",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"collapsed": false
						},
						"source": [
							"df = spark.read.load('abfss://landing@adls5synapse.dfs.core.windows.net/Project4/landing/Customer.csv', format = 'csv', header = True, inferSchema = True)\r\n",
							"df.write.save(path = \"abfss://landing@adls5synapse.dfs.core.windows.net/Project4/BronzeLayer/Customer/\")"
						],
						"outputs": [],
						"execution_count": 4
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Notebook-for-CustomerAddress')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "SmallCluster",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "a9a276a4-ecec-4778-bf95-317780c99802"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/8c5b7985-7f6a-483c-9637-a6887dea60c9/resourceGroups/synapse_rg/providers/Microsoft.Synapse/workspaces/learn-synapse/bigDataPools/SmallCluster",
						"name": "SmallCluster",
						"type": "Spark",
						"endpoint": "https://learn-synapse.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SmallCluster",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.4",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"df = spark.read.load('abfss://landing@adls5synapse.dfs.core.windows.net/Project4/landing/CustomerAddress.csv', format = 'csv', header = True, inferSchema = True)\r\n",
							"df.write.save(path = \"abfss://landing@adls5synapse.dfs.core.windows.net/Project4/BronzeLayer/CustomerAddress/\")"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SmallCluster')]",
			"type": "Microsoft.Synapse/workspaces/bigDataPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"autoPause": {
					"enabled": true,
					"delayInMinutes": 5
				},
				"autoScale": {
					"enabled": true,
					"maxNodeCount": 10,
					"minNodeCount": 3
				},
				"nodeCount": 10,
				"nodeSize": "Small",
				"nodeSizeFamily": "MemoryOptimized",
				"sparkVersion": "3.4",
				"isComputeIsolationEnabled": false,
				"sessionLevelPackagesEnabled": false,
				"annotations": []
			},
			"dependsOn": [],
			"location": "centralindia"
		},
		{
			"name": "[concat(parameters('workspaceName'), '/serverlesspool')]",
			"type": "Microsoft.Synapse/workspaces/sqlPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"collation": "SQL_Latin1_General_CP1_CI_AS",
				"maxSizeBytes": 263882790666240,
				"annotations": []
			},
			"dependsOn": [],
			"location": "centralindia"
		}
	]
}